package UtilCommands
import ChatCommands
import LinkedList
import ObjectIds
import ErrorHandling
import HashMap
import RegisterEvents
import ClosureForGroups



/** If true, all utility commands will be initialized at start of map. If false, 
    commands won't be initialized until maunually done so using either initialize()
    or  player.enableUtilCommands() */
@configurable public let AUTO_INITIALIZE = true

/** The prefix command for all utility commands */
@configurable public let UTILCOMMAND_PREFIX = "-u"

var initialized = false
let utilCommands = new LinkedList<Command>
ChatCommand rootCommand = UTILCOMMAND_PREFIX != null and UTILCOMMAND_PREFIX.length() > 0 ? new ChatCommand(UTILCOMMAND_PREFIX) : null


/** Enables  all utility commands (including custom commands) for the this player */
public function player.enableUtilCommands()
    if( not initialized )
        initializeUtilCommands()
    rootCommand.enableForPlayers(this)


/** Disables all utility commands (including custom commands) for the this player */
public function player.disableUtilCommands()
    if( not initialized )
        initializeUtilCommands()
    rootCommand.disableForPlayers(this)




/** Define a new Utility Command. All utility command are prefixed with UTILCOMMAND_PREFIX,
    and may be disabled / enabled altogether using player.enable-/disableUtilCommands(). */
public function defineUtilCommand(string command) returns Command
    if( not initialized )
        initializeUtilCommands()
    Command newCommand
    newCommand = rootCommand.addSubCommand(command)
    utilCommands.add(newCommand)
    return newCommand


/** Initialize the utility commands. Before this is done, none of the commands will
    be registered. */
public function initializeUtilCommands()
    initialized = true

    if( rootCommand != null)
        rootCommand.addHelpCommand("Series of utility commands")

    defineUtilCommand_CreateUnit()
    defineUtilCommand_CreateItem()
    defineUtilCommand_SetOwner()
    defineUtilCommand_KillUnit()
    defineUtilCommand_Removeunit()
    defineUtilCommand_Levels()
    defineUtilCommand_Exp()
    defineUtilCommand_TypeId()
    defineUtilCommand_Ability()
    defineUtilCommand_Restore()
    defineUtilCommand_Mana()
    defineUtilCommand_Health()
    defineUtilCommand_Armor()
    defineUtilCommand_Damage()
    defineUtilCommand_MoveSpeed()
    defineUtilCommand_Gold()
    defineUtilCommand_Lumber()



init
    if( AUTO_INITIALIZE )
        initializeUtilCommands()



//================================================================================================================================================================================================
// HELP COMMAND

class HelpAction implements CommandAction

    Command command
    var description = ""
    var optionDescriptions = new IterableMap<string, string>

    construct(Command command, string description)
        this.command = command
        this.description = description

    ondestroy
        destroy optionDescriptions

    override function run(player p, ArgumentList args, OptionList opts)
        string helpString = ""

        helpString += "\n" + command.getFullCommand() + " "
        
        for arg in command.getArguments()
            helpString += "[{0}] ".format(arg.argType.toString())
        helpString = helpString.highlight()
        helpString += "\n" + description
        
        // Add Options
        let optionMap = command.getOptions()
        if( optionMap.size() > 0 )
            helpString += "\nOptions:"
            for optionLabel in command.getOptions()
                let option = optionMap.get(optionLabel)
                helpString += "\n    " + optionLabel
                if( option.argType != NONE ) // Its a witch
                    helpString += "=" + option.defaultValue
                if( optionDescriptions.has(optionLabel) )
                    helpString += "    " + optionDescriptions.get(optionLabel)
            
        // Add Subcommands 
        let subCommands = command.getSubCommands()
        if( subCommands.size() > 1 )
            helpString += "\nSub Commands:"
            for subCommand in subCommands
                if( subCommand != "help")
                    helpString += "\n    " + subCommand
        
        p.print(helpString, 25)


    /** Adds a description to given option, when this HelpAction is run.
        All options will be displayed, regardless of whther they have a 
        description or not */
    function setOptionDescription(string option, string description)
        if( optionDescriptions.has(option))
            optionDescriptions.getAndRemove(option)
        optionDescriptions.put(option, description)
        
        
/** Adds a help command to this command.
    The help command will print the syntax of the command (i.e. -util createunit [STRING]),
    the given description, as well as available options and sub commands.
    Using the returned HelpAction, you may add descriptions to options. */
public function Command.addHelpCommand(string description) returns HelpAction
    let action = new HelpAction(this, description)
    this.addSubCommand("help").setAction(action)    
    return action




//================================================================================================================================================================================================
// HIGHLIGHTING

@configurable public let HIGHTLIGHT_COLOR = color(255, 204, 0)

/** Add a highlight color to the text string */
function string.highlight() returns string
    return HIGHTLIGHT_COLOR.toColorString() + this + "|r"
                        




//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/* MOUSE POS
    Used by several utility commands
*/

var REGISTER_MOUSEPOS = true
vec2 array mousePosition

/** Returns the position of this player's mouse in map coordinates. */
public function player.getMousePos() returns vec2
    if not REGISTER_MOUSEPOS
        error("PlayerMouse: Library is not activated!")
    return mousePosition[this.getId()]
    
    
init
    if REGISTER_MOUSEPOS
        registerPlayerEvent(EVENT_PLAYER_MOUSE_MOVE) ->
            mousePosition[GetTriggerPlayer().getId()] = vec2( BlzGetTriggerPlayerMouseX(), BlzGetTriggerPlayerMouseY() )




//================================================================================================================================================================================================
// COMMAND DEFINITIONS
// Create a config package to override or disable any of these
//================================================================================================================================================================================================


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Create Unit
@configurable public function defineUtilCommand_CreateUnit()

    let cmd = defineUtilCommand("createunit")
    ..addArgument(ArgumentType.STRING)
    ..addOptionInt("p", -1)
    ..addOptionInt("n", 1)
    ..setAction() (p, args, opts) ->
        var unitOwnerId = opts.getInt("p")
        var numberOfUnits = opts.getInt("n")
        if( unitOwnerId == -1)
            unitOwnerId = p.getId()
        if( unitOwnerId > 25 or unitOwnerId < 0)
            p.print("\nPlayer ID (p) must be between 0 and 25")
        else if( numberOfUnits < 1)
            p.print("\nNumber of units (n) must be higher than 0")
        else
            let idString = args.getString()
            if( idString.length() > 4 or idString.length() < 4 )
                p.print("\nUnit ID must be exactly 4 characters long")
            else
                let unitId = idString.fromRawCode()
                unit u = null
                for i=1 to numberOfUnits
                    u = createUnit( Player(unitOwnerId), unitId, p.getMousePos(), angle(0))
                if( u == null )
                    p.print("\nDoesn't recognize unit type id '{0}'".format(idString))
                else
                    p.print("\nCreated {0} {1} for {2}".format( numberOfUnits.toString(), u.getName().highlight(), Player(unitOwnerId).getNameColored() ))
    
    cmd.addHelpCommand("Creates one or several units of given type ID (i.e 'hfoo') for a player. The unit is placed at the commanding players mouse position.")
    ..setOptionDescription("p", "ID of player to create units for. -1 is commanding player.")
    ..setOptionDescription("n", " Number of units to create")
    

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Create Unit
@configurable public function defineUtilCommand_CreateItem()

    let cmd = defineUtilCommand("createitem")
    ..addArgument(ArgumentType.STRING)
    ..addOptionInt("n", 1)
    ..setAction() (p, args, opts) ->
        var numberOfItems = opts.getInt("n")
        if( numberOfItems < 1)
            numberOfItems = 1

        let idString = args.getString()
        if( idString.length() > 4 or idString.length() < 4 )
            p.print("\nID must be exactly 4 characters long")
        else
            let itemId = idString.fromRawCode()
            item createdItem = null
            for i=1 to numberOfItems
                createdItem = createItem(itemId, p.getMousePos())
            if( createdItem == null )
                p.print("\nDoesn't recognize item type id '{0}'".format(idString.highlight()))
            else
                p.print("\nCreated {0} {1}".format( numberOfItems.toString().highlight(), createdItem.getName().highlight() ))
    
    cmd.addHelpCommand("Creates one or several items of given type ID (i.e 'ratc'). The item is placed at the commanding players mouse position.")
    ..setOptionDescription("n", " Number of items to create")
    


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Set Owner
@configurable public function defineUtilCommand_SetOwner()
    let cmd = defineUtilCommand("setowner")
    ..addArgument(ArgumentType.INT)
    ..addOptionSwitch("c")
    ..setAction() (p, args, opts) ->
        let playerId = args.getInt()
        let changeColor = not opts.getSwitch("c")
        if( playerId > 25 or playerId < 0)
            p.print("\nPlayer ID (p) must be between 0 and 25")
        else
            forUnitsSelected(p) u ->
                u.setOwner(Player(playerId), changeColor)
        
    cmd.addHelpCommand("Sets the owner of all selected units to player with given ID.")
    ..setOptionDescription("c", "Maintain the color of current owner")
    
        
        
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Kill Unit
@configurable public function defineUtilCommand_KillUnit()
    let cmd = defineUtilCommand("kill")
    ..setAction() (p, args, opts) ->
        forUnitsSelected(p) u ->
            u.kill()
        
    cmd.addHelpCommand("Kill selected units.")
    

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Remove Unit
@configurable public function defineUtilCommand_Removeunit()
    let cmd = defineUtilCommand("remove")
    ..setAction() (p, args, opts) ->
        forUnitsSelected(p) u ->
            u.remove()
        
    cmd.addHelpCommand("Remove selected units.")





//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Levels
@configurable public function defineUtilCommand_Levels()
    let cmd = defineUtilCommand("lvl")
    ..addArgument(ArgumentType.INT)
    ..addOptionSwitch("a")
    ..setAction() (p, args, opts) ->
        let amount = args.getInt()
        forUnitsSelected(p) (u) ->
            if( u.isType(UNIT_TYPE_HERO) )
                if( opts.getSwitch("a") )
                    if( amount < 0)
                        u.removeLevels(amount)
                    if( amount > 0)
                        u.addLevels(amount, false)
                else
                    if( amount < 1 )
                        p.print("Can't set level to less than 1")
                    else if( amount < u.getLevel())
                        u.removeLevels(u.getLevel()-amount)
                    else
                        u.setLevel(u.getLevel(), false)
            else
                p.print("{0} is not a Hero unit".format(u.getName().highlight()))
            
    cmd.addHelpCommand("Set the level of selected Heroes to given value.")
    ..setOptionDescription("a", "Adjust the level with the given value rather than setting it.")


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Experience
@configurable public function defineUtilCommand_Exp()
    let cmd = defineUtilCommand("exp")
    ..addArgument(ArgumentType.INT)
    ..addOptionSwitch("o")
    ..setAction() (p, args, opts) ->
        let amount = args.getInt()
        forUnitsSelected(p) (u) ->
            if( not u.isType(UNIT_TYPE_HERO))
                p.print("{0} is not a Hero".format(u.getName().highlight()))
            else
                if( not opts.getSwitch("s"))
                    u.addXp(amount, false)
                else
                    u.setXp(amount, false )

    cmd.addHelpCommand("Adjust the experience of selected units with given value.")
    ..setOptionDescription("s", "Set the experience to the value rather than adjusting it")


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Type Id
@configurable public function defineUtilCommand_TypeId()
    let cmd = defineUtilCommand("typeid")
    ..setAction() (p, args, opts) ->
        forUnitsSelected(p) (u) ->
            p.print("ID of {0} is {1}".format(u.getName().highlight(), u.getTypeId().toRawCode().highlight()))
        
    cmd.addHelpCommand("Print the type ID of the selected units. This ID can be used with 'createunit' command.")


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Ability
@configurable public function defineUtilCommand_Ability()
    var cmd = defineUtilCommand("abil")
    cmd.addHelpCommand("Manipulate the abilities of selected units.")
            
    var cmdAdd = cmd.addSubCommand("add")
    ..addArgument(ArgumentType.STRING)
    ..setAction() (p, args, opts) ->
        let idString = args.getString()
        if( idString.length() > 4 or idString.length() < 4 )
            p.print("\nAbility ID must be exactly 4 characters long")
        else
            let abilId = idString.fromRawCode()
            forUnitsSelected(p) (u) ->
                if( u.getAbilityLevel(abilId) > 0 )
                    p.print(u.getName().highlight() + " already has the ability " + GetAbilityName(abilId).highlight())
                else
                    u.addAbility(abilId)
                    if( u.getAbilityLevel(abilId) > 0)
                        p.print("Added ability {0} to {1}".format(GetAbilityName(abilId).highlight(), u.getName().highlight()))
    cmdAdd.addHelpCommand("Add ability with given ID to selected units.")

    var cmdRemove = cmd.addSubCommand("remove")
    ..addArgument(ArgumentType.STRING)
    ..setAction() (p, args, opts) ->
        let idString = args.getString()
        if( idString.length() > 4 or idString.length() < 4 )
            p.print("\nAbility ID must be exactly 4 characters long")
        else
            let abilId = idString.fromRawCode()
            forUnitsSelected(p) (u) ->
                if( u.getAbilityLevel(abilId) == 0 )
                    p.print(u.getName().highlight() + " doesn't have the ability " + GetAbilityName(abilId).highlight())
                else
                    u.removeAbility(abilId)
                    p.print("Removed ability {0} from {1}".format(GetAbilityName(abilId).highlight(), u.getName().highlight()))
    cmdRemove.addHelpCommand("Remove ability with given ID from selected units.")

    var cmdLvl = cmd.addSubCommand("lvl")
    ..addArgument(ArgumentType.STRING)
    ..setAction() (p, args, opts) ->
        let idString = args.getString()
        if( idString.length() > 4 or idString.length() < 4 )
            p.print("\nAbility ID must be exactly 4 characters long")
        else
            let abilId = idString.fromRawCode()
            p.print("\n")
            forUnitsSelected(p) (u) ->
                p.print("Level of ability {0} for {1} is {2}".format(GetAbilityName(abilId).highlight(), u.getName().highlight(), u.getAbilityLevel(abilId).toString().highlight() ))
        
    cmdLvl.addHelpCommand("Get the level of ability with given ID from selected units, or manipulate the ability levels using the sub commands.")
    
    var cmdLvl_add = cmdLvl.addSubCommand("set")
    ..addArgument(ArgumentType.STRING)
    ..addArgument(ArgumentType.INT)
    ..setAction() (p, args, opts) ->
        let idString = args.getString()
        let lvl = args.getInt()
        if( idString.length() > 4 or idString.length() < 4 )
            p.print("\nAbility ID must be exactly 4 characters long")
        else if( lvl < 1 )
            p.print("Second argument (level) must be larger than 0")
        else
            let abilId = idString.fromRawCode()
            forUnitsSelected(p) (u) -> 
                if( not u.hasAbility(abilId))
                    p.print("{0} doesn't have ability {1}".format(u.getName().highlight(), GetAbilityName(abilId).highlight()))
                else
                    u.setAbilityLevel(abilId, lvl)
                    p.print("Set level of {0} for {1} to {2}".format(GetAbilityName(abilId).highlight(), u.getName().highlight(), u.getAbilityLevel(abilId).toString().highlight()))
                
    cmdLvl_add.addHelpCommand("Set the level of an ability with given ID for selected units to given lvl.")
            


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Health
@configurable public function defineUtilCommand_Health()
    
    let cmd = defineUtilCommand("health")
    ..addArgument(ArgumentType.INT)
    ..addOptionSwitch("a")
    ..addOptionSwitch("c")
    ..setAction() (p,args,opts) ->
        var current = opts.getSwitch("c")
        var amount = args.getInt()
        var adjust = opts.getSwitch("a")
        if( not adjust )
            forUnitsSelected(p) u ->
                if( current )
                    u.setHP(amount.toReal())
                else
                    u.setMaxHP(amount, true)
        else
            forUnitsSelected(p) u ->
                if( current )
                    u.addHP(amount.toReal())
                else
                    u.setMaxHP((u.getMaxHP()+amount).toInt(), true)

    cmd.addHelpCommand("Set or adjust the current or total health of selected units by the given amount.")
    ..setOptionDescription("c", "Manipulate the current rather than total health.")
    ..setOptionDescription("a", "Adjust the health rather setting it")


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Mana
@configurable public function defineUtilCommand_Mana()
    
    let cmd = defineUtilCommand("mana")
    ..addArgument(ArgumentType.INT)
    ..addOptionSwitch("a")
    ..addOptionSwitch("c")
    ..setAction() (p,args,opts) ->
        var current = opts.getSwitch("c")
        var amount = args.getInt()
        var adjust = opts.getSwitch("a")
        if( not adjust )
            forUnitsSelected(p) u ->
                if( current )
                    u.setMana(amount.toReal())
                else
                    u.setMaxMana(amount, true)
        else
            forUnitsSelected(p) u ->
                if( current )
                    u.addMana(amount.toReal())
                else
                    u.setMaxMana((u.getMaxMana()+amount).toInt(), true)

    cmd.addHelpCommand("Set or adjust the current or total mana of selected units by the given amount.")
    ..setOptionDescription("c", "Manipulate the current rather than total mana.")
    ..setOptionDescription("a", "Adjust the mana rather setting it")


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Damage
@configurable public function defineUtilCommand_Damage()
    
    let cmd = defineUtilCommand("damage")
    ..addArgument(ArgumentType.INT)
    ..addOptionSwitch("a")
    ..addOptionInt("i", 0)
    ..setAction() (p,args,opts) ->
        var amount = args.getInt()
        var index = opts.getInt("i")

        forUnitsSelected(p) u ->
            if( opts.getSwitch("a"))
                u.setBaseDamage(amount+u.getBaseDamage(index), index)
            else
                u.setBaseDamage(amount, index)

    cmd.addHelpCommand("Set or adjust the damage of selected units by the given amount.")
    ..setOptionDescription("a", "Adjust the damage rather setting it")
    ..setOptionDescription("i", "The Weapon Index to adjust damage for (either 0 or 1)")


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Armor
@configurable public function defineUtilCommand_Armor()
    
    let cmd = defineUtilCommand("armor")
    ..addArgument(ArgumentType.INT)
    ..addOptionSwitch("a")
    ..setAction() (p,args,opts) ->
        var amount = args.getInt()

        forUnitsSelected(p) u ->
            if( opts.getSwitch("a"))
                u.setArmor(amount+u.getArmor())
            else
                u.setArmor(amount.toReal())

    cmd.addHelpCommand("Set or adjust the armor of selected units by the given amount.")
    ..setOptionDescription("a", "Adjust the armor rather setting it")


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Move Speed
@configurable public function defineUtilCommand_MoveSpeed()
    
    let cmd = defineUtilCommand("movespeed")
    ..addArgument(ArgumentType.INT)
    ..addOptionSwitch("a")
    ..setAction() (p,args,opts) ->
        var amount = args.getInt()

        forUnitsSelected(p) u ->
            if( opts.getSwitch("a"))
                u.setMoveSpeed(amount+u.getMoveSpeed())
            else
                u.setMoveSpeed(amount.toReal())

    cmd.addHelpCommand("Set or adjust the movement pseeed of selected units by the given amount.")
    ..setOptionDescription("a", "Adjust with the value rather setting it")


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Restore
@configurable public function defineUtilCommand_Restore()

    let cmd = defineUtilCommand("restore")
    ..addOptionSwitch("h")
    ..addOptionSwitch("m")
    ..addOptionInt("a", 0)
    ..setAction() (p, args, opts) ->
        var amount = opts.getInt("a")
        let restoreHealth = opts.getSwitch("h") or not opts.getSwitch("m")
        let restoreMana = opts.getSwitch("m") or not opts.getSwitch("h")
        forUnitsSelected(p) (u) ->
            if( restoreHealth )
                if( amount > 0 )
                    u.addHP(amount.toReal())
                else
                    u.setHP(u.getMaxHP())
            if( restoreMana )
                if( amount > 0 )
                    u.addMana(amount.toReal())
                else
                    u.setMana(u.getMaxMana())
            p.print("Restored "+u.getName())
    cmd.addHelpCommand("Restore the health and/or mana of selected units.")
    ..setOptionDescription("a", " Amount of mana and health to restore. If less than 1 it will restore to full.")
    ..setOptionDescription("h", " Restore only health.")
    ..setOptionDescription("m", "Restore only mana.")

            
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Gold
@configurable public function defineUtilCommand_Gold()

    let cmd = defineUtilCommand("gold")
    ..addArgument(ArgumentType.INT)
    ..addOptionInt("p", -1)
    ..addOptionSwitch("a")
    ..setAction() (p, args, opts) ->
        var amount = opts.getInt("a")
        var playerId = opts.getInt("p")
        if( playerId == -1 )
            playerId = p.getId()

        if( opts.getSwitch("s"))
            Player(playerId).setGold(amount)
        else
            Player(playerId).addGold(amount)

    cmd.addHelpCommand("Add a given amount of gold to the player.")
    ..setOptionDescription("s", "Set the gold to the given value rather than adjusting with it")
    ..setOptionDescription("p=-1", "ID of Player to manipulate the gold of. If -1, the commanding player is used.")


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Lumber
@configurable public function defineUtilCommand_Lumber()

    let cmd = defineUtilCommand("lumber")
    ..addArgument(ArgumentType.INT)
    ..addOptionInt("p", -1)
    ..addOptionSwitch("a")
    ..setAction() (p, args, opts) ->
        var amount = opts.getInt("a")
        var playerId = opts.getInt("p")
        if( playerId == -1 )
            playerId = p.getId()

        if( opts.getSwitch("s"))
            Player(playerId).setLumber(amount)
        else
            Player(playerId).addLumber(amount)

    cmd.addHelpCommand("Add a given amount of lumber to the player.")
    ..setOptionDescription("s", "Set the lumber to the given value rather than adjusting with it")
    ..setOptionDescription("p=-1", "ID of Player to manipulate the lumber of. If -1, the commanding player is used.")









